# -*- coding: utf-8 -*-
"""Aula 02 - Preparação e Limpeza de Dados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CLSp7WTdiW1QMSigZZpOWVhv0GJFmdq_
"""

# Importa biblioteca Pandas com o alias pd
import pandas as pd

# Este comando carrega o conjunto de dados de um arquivo CSV hospedado no GitHub
# em um DataFrame pandas chamado 'df'.
df = pd.read_csv("https://raw.githubusercontent.com/guilhermeonrails/data-jobs/refs/heads/main/salaries.csv")

# Dicionário de renomeação
novos_nomes = {
    'work_year': 'ano',
    'experience_level': 'senioridade',
    'employment_type': 'contrato',
    'job_title': 'cargo',
    'salary': 'salario',
    'salary_currency': 'moeda',
    'salary_in_usd': 'usd',
    'employee_residence': 'residencia',
    'remote_ratio': 'remoto',
    'company_location': 'empresa',
    'company_size': 'tamanho_empresa'
}

# Aplicando renomeação
df.rename(columns=novos_nomes, inplace=True)

# Verifica se há valores nulos em cada célula do DataFrame, retornando True para nulo e False caso contrário.
df.isnull()

# Exibe as primeiras 5 linhas do DataFrame 'df'.
df.head()

# Conta o número de valores nulos em cada coluna do DataFrame 'df' e exibe o resultado.
df.isnull().sum()

# Este comando exibe os valores únicos presentes na coluna 'ano' do DataFrame 'df'.
df['ano'].unique()

# Seleciona e exibe todas as linhas do DataFrame 'df' que contêm pelo menos um valor nulo em qualquer coluna.
df[df.isnull().any(axis=1)]

# Importa a biblioteca NumPy e a renomeia como 'np'. NumPy é comumente usada para operações numéricas e arrays.
import numpy as np


## Criação de um dataframe de teste
df_salarios = pd.DataFrame({
    'nome': ["Marllon", "Tais", "Rita", "Arnaldo", "Gal"],
    'salario': [10000, 7777, np.nan, np.nan, 100000]
})

## Calcula a media dos salarios e arredonda, subistitui os nulos
df_salarios["salario_media"] = df_salarios["salario"].fillna(df_salarios["salario"].mean().round(2))

# Preenche os valores nulos na coluna 'salario' com a mediana dos salários e armazena o resultado em uma nova coluna 'salario_mediana'.
df_salarios["salario_mediana"] = df_salarios["salario"].fillna(df_salarios["salario"].median())

# Exibe o DataFrame 'df_salarios'.
df_salarios

# Criação de um dataframe de teste chamado 'df_temperaturas'.
df_temperaturas = pd.DataFrame({
    'Dia': ["Segunda", "Terça", "Quarta", "Quinta", "Sexta"],
    'Temperatura': [30, np.nan, np.nan, 28, 27]
})

# Preenche os valores nulos na coluna 'Temperatura' usando o método backfill (bfill),
# que usa o próximo valor válido para preencher os nulos, e armazena em uma nova coluna.
df_temperaturas["Preenchido_bfill"] = df_temperaturas["Temperatura"].bfill()

# Exibe o DataFrame 'df_temperaturas'.
df_temperaturas

# Criação de um DataFrame de teste chamado 'df_cidades'.
df_cidades = pd.DataFrame({
    'nome': ["Marllon", "Tais", "Rita", "Arnaldo", "Gal"],
    'cidade': ["São Paulo", np.nan, "Curitiba", np.nan, "Belém"]
})

# Preenche os valores nulos na coluna 'cidade' com a string "Não Informado!" e armazena em uma nova coluna 'cidade_preenchida'.
df_cidades["cidade_preenchida"] = df_cidades["cidade"].fillna("Não Informado!")

# Exibe o DataFrame 'df_cidades'.
display(df_cidades)

# Cria um novo DataFrame chamado 'df_limpo' removendo todas as linhas que contêm pelo menos um valor nulo do DataFrame original 'df'.
df_limpo = df.dropna()

# Verifica se há valores nulos em cada célula do DataFrame, retornando True para nulo e False caso contrário.
df_limpo.isnull().sum()

# Exibe as primeiras 5 linhas do DataFrame 'df'.
df.head()

# Exibe um resumo conciso do DataFrame, incluindo o tipo de índice, nomes das colunas, contagem de valores não nulos e uso de memória.
df_limpo.info()

# Converte a coluna 'ano' do DataFrame 'df_limpo' para o tipo de dado inteiro (int64).
# O método assign() é usado para atribuir uma nova coluna ou modificar uma existente.
df_limpo = df_limpo.assign(ano = df_limpo ['ano'].astype('int64'))

# Exibe as primeiras 5 linhas do DataFrame 'df_limpo'.
df_limpo.head()

# Exibe um resumo conciso do DataFrame, incluindo o tipo de índice, nomes das colunas, contagem de valores não nulos e uso de memória.
df_limpo.info()